name: Auto Podcast Generation

on:
  schedule:
    # 毎日日本時間9時に実行 (UTC 0時)
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      topic_keywords:
        description: 'Topic keywords (comma separated)'
        required: false
        default: 'AI,Technology,Programming'
      custom_prompt:
        description: 'Custom prompt for Notebook LM'
        required: false

env:
  GOOGLE_OAUTH_CREDENTIALS: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS }}
  OAUTH_SESSION_DATA: ${{ secrets.OAUTH_SESSION_DATA }}
  PODCAST_BASE_URL: ${{ secrets.PODCAST_BASE_URL }}
  SKIP_REAL_GENERATION: ${{ vars.SKIP_REAL_GENERATION || 'true' }}
  NOTEBOOK_LM_TEST_MODE: ${{ vars.NOTEBOOK_LM_TEST_MODE || 'false' }}

jobs:
  generate-podcast:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Chrome and ChromeDriver for Selenium
        sudo apt-get update
        sudo apt-get install -y wget unzip
        
        # Install stable Chrome with fallback approach
        echo "Installing stable Chrome version..."
        
        # First try to install latest stable Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        
        # Install Chrome dependencies for Ubuntu 24.04
        sudo apt-get install -y fonts-liberation libasound2t64 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libdrm2 libgtk-3-0 libnspr4 libnss3 libwayland-client0 libxcomposite1 libxdamage1 libxrandr2 xdg-utils libxss1 libgconf-2-4 || echo "Some dependencies may be missing but continuing..."
        
        # Install multiple browsers for WebDriver fallbacks
        echo "Installing multiple browsers: Firefox, Chromium, Edge..."
        sudo apt-get install -y firefox chromium-browser xvfb
        
        # Install Microsoft Edge
        curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-edge.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-edge.gpg] https://packages.microsoft.com/repos/edge stable main" | sudo tee /etc/apt/sources.list.d/microsoft-edge.list
        sudo apt-get update
        sudo apt-get install -y microsoft-edge-stable || echo "Edge installation failed, continuing..."
        
        # Setup virtual display for headless browsers
        export DISPLAY=:99.0
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
        # Verify browser installations
        echo "=== Browser Installation Verification ==="
        firefox --version || echo "Firefox: Not available"
        chromium-browser --version || echo "Chromium: Not available"
        microsoft-edge --version || echo "Edge: Not available"
        google-chrome --version || echo "Chrome: Not available"
        
        # Install Google Chrome with error handling
        if sudo apt-get install -y google-chrome-stable; then
            echo "Chrome installation successful"
            # Try to prevent Chrome from updating during the workflow
            sudo apt-mark hold google-chrome-stable || echo "Could not hold Chrome package"
        else
            echo "Chrome installation failed, trying to fix dependencies"
            sudo apt-get install -f -y
            sudo apt-get install -y google-chrome-stable || echo "Chrome installation still failed"
        fi
        
        # Verify Chrome installation
        if google-chrome --version; then
            echo "Chrome verification successful"
        else
            echo "Chrome verification failed, trying alternative approach"
            # Try installing chromium as fallback
            sudo apt-get install -y chromium-browser
            chromium-browser --version || echo "Chromium fallback also failed"
        fi
        
        # Install ChromeDriver manually as backup
        CHROME_VERSION=$(google-chrome --version | cut -d' ' -f3)
        echo "Full Chrome version: $CHROME_VERSION"
        CHROME_MAJOR=$(echo $CHROME_VERSION | cut -d'.' -f1)
        echo "Chrome major version: $CHROME_MAJOR"
        
        # Get compatible ChromeDriver version with simplified approach
        echo "Installing compatible ChromeDriver..."
        
        if [ $CHROME_MAJOR -ge 115 ]; then
            echo "Using new ChromeDriver API for Chrome $CHROME_MAJOR"
            # For Chrome 115+, try the new API
            CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json" | python3 -c "import json,sys; data=json.load(sys.stdin); print(data['channels']['Stable']['version'])" 2>/dev/null || echo "")
            
            if [ -n "$CHROMEDRIVER_VERSION" ]; then
                echo "Found ChromeDriver version: $CHROMEDRIVER_VERSION"
                CHROMEDRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
                
                if wget -q "$CHROMEDRIVER_URL" -O chromedriver-linux64.zip; then
                    unzip -q chromedriver-linux64.zip
                    sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
                    sudo chmod +x /usr/local/bin/chromedriver
                    rm -rf chromedriver-linux64.zip chromedriver-linux64/
                    echo "New API ChromeDriver installation successful"
                else
                    echo "New API download failed, trying fallback"
                fi
            fi
        fi
        
        # Fallback to old API or older Chrome versions
        if [ ! -f /usr/local/bin/chromedriver ]; then
            echo "Trying legacy ChromeDriver API..."
            for version in $CHROME_MAJOR $(($CHROME_MAJOR-1)) $(($CHROME_MAJOR-2)) 114 113; do
                CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$version" 2>/dev/null | grep -v "<?xml" || echo "")
                if [ -n "$CHROMEDRIVER_VERSION" ]; then
                    echo "Using legacy ChromeDriver version: $CHROMEDRIVER_VERSION"
                    if wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"; then
                        unzip -q chromedriver_linux64.zip
                        sudo mv chromedriver /usr/local/bin/
                        sudo chmod +x /usr/local/bin/chromedriver
                        rm -f chromedriver_linux64.zip
                        echo "Legacy ChromeDriver installation successful"
                        break
                    fi
                fi
            done
        fi
        
        # Verify ChromeDriver installation
        if [ -f /usr/local/bin/chromedriver ]; then
            /usr/local/bin/chromedriver --version
        else
            echo "ChromeDriver manual installation failed - will rely on webdriver-manager"
        fi
        
        # Install GeckoDriver for Firefox
        echo "Installing GeckoDriver for Firefox..."
        GECKODRIVER_VERSION=$(curl -s "https://api.github.com/repos/mozilla/geckodriver/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")')
        
        if [ -n "$GECKODRIVER_VERSION" ]; then
            echo "Installing GeckoDriver version: $GECKODRIVER_VERSION"
            # URLを修正 - v接頭辞を削除
            GECKODRIVER_URL="https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-${GECKODRIVER_VERSION#v}-linux64.tar.gz"
            echo "Downloading from: $GECKODRIVER_URL"
            if wget -q "$GECKODRIVER_URL" -O geckodriver.tar.gz; then
                tar -xzf geckodriver.tar.gz
                sudo mv geckodriver /usr/local/bin/
                sudo chmod +x /usr/local/bin/geckodriver
                rm geckodriver.tar.gz
                echo "GeckoDriver installation successful"
                /usr/local/bin/geckodriver --version
            else
                echo "Download failed, trying fallback URL"
                wget -q "https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-linux64.tar.gz" -O geckodriver.tar.gz
                tar -xzf geckodriver.tar.gz
                sudo mv geckodriver /usr/local/bin/
                sudo chmod +x /usr/local/bin/geckodriver
                rm geckodriver.tar.gz
                echo "GeckoDriver fallback installation successful"
            fi
        else
            echo "Failed to get GeckoDriver version, using fixed version"
            wget -q "https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-linux64.tar.gz" -O geckodriver.tar.gz
            tar -xzf geckodriver.tar.gz
            sudo mv geckodriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/geckodriver
            rm geckodriver.tar.gz
            echo "GeckoDriver fixed version installation successful"
        fi
        
        # Verify Firefox and GeckoDriver installation
        firefox --version || echo "Firefox installation may have issues"
        /usr/local/bin/geckodriver --version || echo "GeckoDriver installation may have issues"
    
    - name: Create required directories
      run: |
        mkdir -p audio_files
        mkdir -p content
        mkdir -p static
    
    - name: Test Notebook LM Connection
      env:
        GOOGLE_OAUTH_CREDENTIALS: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS }}
        OAUTH_SESSION_DATA: ${{ secrets.OAUTH_SESSION_DATA }}
        NOTEBOOK_LM_TEST_MODE: ${{ vars.NOTEBOOK_LM_TEST_MODE || 'false' }}
        SKIP_REAL_GENERATION: 'false'
      run: |
        echo "=== Notebook LM 接続テスト ==="
        python test_notebook_lm.py || echo "接続テストが失敗しましたが、処理を続行します"
    
    - name: Check daily generation limit
      id: check_limit
      run: |
        echo "Checking generation limits..."
        TODAY=$(date +%Y%m%d)
        COUNT=$(find audio_files -name "*${TODAY}*.mp3" 2>/dev/null | wc -l)
        
        if [ $COUNT -ge 3 ]; then
          echo "skip_generation=true" >> $GITHUB_OUTPUT
          echo "Daily limit reached: $COUNT episodes generated today"
        else
          echo "skip_generation=false" >> $GITHUB_OUTPUT
          echo "Can generate: $((3-COUNT)) episodes remaining today"
        fi
    
    - name: Generate podcast episode
      if: steps.check_limit.outputs.skip_generation == 'false'
      env:
        GOOGLE_OAUTH_CREDENTIALS: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS }}
        OAUTH_SESSION_DATA: ${{ secrets.OAUTH_SESSION_DATA }}
        PODCAST_BASE_URL: ${{ secrets.PODCAST_BASE_URL }}
        KEYWORDS: ${{ github.event.inputs.topic_keywords || 'AI,Technology,Programming,Startup' }}
        CUSTOM_PROMPT: ${{ github.event.inputs.custom_prompt }}
      run: |
        python podcast_generator.py
    
    - name: Generate RSS feed
      if: steps.check_limit.outputs.skip_generation == 'false'
      env:
        PODCAST_BASE_URL: ${{ secrets.PODCAST_BASE_URL }}
      run: |
        echo "Checking audio files before RSS generation..."
        ls -la audio_files/ 2>/dev/null || echo "No audio_files directory"
        ls -la content/ 2>/dev/null || echo "No content directory"
        
        echo "Generating RSS feed..."
        python rss_feed_generator.py
        
        echo "Checking generated RSS feed..."
        if [ -f podcast_feed.xml ]; then
          echo "RSS feed generated successfully"
          head -20 podcast_feed.xml
        else
          echo "RSS feed generation failed"
        fi
    
    - name: Upload audio artifacts
      if: steps.check_limit.outputs.skip_generation == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: podcast-audio-${{ github.run_number }}
        path: audio_files/*.mp3
        retention-days: 30
    
    - name: Upload RSS feed
      if: steps.check_limit.outputs.skip_generation == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: podcast-rss-${{ github.run_number }}
        path: podcast_feed.xml
        retention-days: 30
    
    - name: Commit and push changes
      if: steps.check_limit.outputs.skip_generation == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add audio_files/ content/ podcast_feed.xml 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-generate podcast episode $(date +%Y%m%d)"
          git push
        fi
    
    - name: Cleanup old files
      run: |
        find audio_files -name "*.mp3" -mtime +30 -delete 2>/dev/null || true
        find content -name "*.txt" -mtime +30 -delete 2>/dev/null || true
        find content -name "*.json" -mtime +30 -delete 2>/dev/null || true
    
    - name: Report status
      run: |
        echo "Podcast generation completed!"
        echo "Audio files:"
        ls -la audio_files/ 2>/dev/null || echo "No audio files found"
        echo "RSS feed:"
        ls -la podcast_feed.xml 2>/dev/null || echo "No RSS feed found"
        echo "Content files:"
        ls -la content/ 2>/dev/null || echo "No content files found"

  deploy-to-pages:
    needs: generate-podcast
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Prepare static files
      run: |
        mkdir -p static
        
        # RSS Feed
        if [ -f podcast_feed.xml ]; then
          cp podcast_feed.xml static/feed.xml
          echo "RSS Feed copied to static/feed.xml"
        else
          echo "Warning: podcast_feed.xml not found"
        fi
        
        # Audio files
        if [ -d audio_files ]; then
          mkdir -p static/audio
          cp audio_files/*.mp3 static/audio/ 2>/dev/null || true
          echo "Audio files copied to static/audio/"
          ls -la static/audio/ 2>/dev/null || echo "No audio files found"
        else
          echo "Warning: audio_files directory not found"
        fi
        
        # Copy existing HTML files
        if [ -f index.html ]; then
          cp index.html static/index.html
          echo "Main index.html copied"
        fi
        
        if [ -f system_overview.html ]; then
          cp system_overview.html static/system_overview.html
          echo "System overview HTML copied"
        fi
        
        # Create episodes listing page
        cat > static/episodes.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Episodes - AI Auto Podcast</title>
            <meta charset="utf-8">
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        </head>
        <body>
            <div class="container mt-4">
                <h1>AI Auto Podcast - Episodes</h1>
                <p><a href="index.html">← Back to Home</a></p>
                <p><a href="feed.xml">RSS Feed</a></p>
                
                <h2>Latest Episodes</h2>
                <div id="episodes"></div>
            </div>
            
            <script>
                // Episode listing will be populated by JavaScript if audio files exist
                const episodesDiv = document.getElementById('episodes');
                episodesDiv.innerHTML = '<p>Episodes will appear here after podcast generation...</p>';
            </script>
        </body>
        </html>
        EOF
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./static
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4